<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--redis数据源-->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--最大空闲数-->
        <property name="maxIdle" value="${redis.maxldle}"/>
        <!--最大连接数-->
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <!--最大等待时间-->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
        <!--连接超时是否阻塞-->
        <property name="blockWhenExhausted" value="${redis.blockWhenExhausted}"/>
        <!--返回连接时，检测连接是否成功-->
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>

    <!--spring-redis连接池管理工厂-->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
    p:hostName="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}" p:timeout="${redis.timeout}"
    p:poolConfig-ref="poolConfig" p:usePool="true">

    </bean>

    <!--redis template definition-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>

        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>

        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>

        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>

        <property name="hashValueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>

        <!--开启事务-->
        <property name="enableTransactionSupport" value="true"/>
    </bean>

    <!--缓存拦截器配置-->
    <bean id="methodCacheInterceptor" class="com.jxau.redis.MethodCacheInterceptor">
        <property name="redisUtil" ref="redisUtil"/>
        <property name="defaultCacheExprieTime" value="${defaultCacheExpireTime}"/>

        <!--禁用缓存的类名列表-->
        <property name="targetNamesList">
            <list>
                <value></value>
            </list>
        </property>

        <!--禁用缓存的方法名列表-->
        <property name="methodNamesList">
            <list>
                <value>add</value>
                <value>update</value>
                <value>user</value>
                <value>chang</value>
                <value>deposit</value>
                <value>withdraw</value>
                <value>transfer</value>
            </list>
        </property>
    </bean>

    <!--redisUtil-->
    <bean id="redisUtil" class="com.jxau.redis.RedisUtil">
        <property name="redisTemplate" ref="redisTemplate"/>
    </bean>

    <!--配置切面拦截方法-->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="controllerMethodPointcut" expression="execution(* com.jxau.service.impl.*.*(..))"/>
        <aop:advisor advice-ref="methodCacheInterceptor" pointcut-ref="controllerMethodPointcut"/>
    </aop:config>
</beans>